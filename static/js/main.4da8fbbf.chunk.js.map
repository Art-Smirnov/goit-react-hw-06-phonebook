{"version":3,"sources":["redux/contacts/contacts-actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactListItem/ContactListItem.js","Components/ContactList/ContactListItem/ContactListItem.container.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/Filter/Filter.container.js","Components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["contactsActions","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","ContactForm","state","onInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","this","onChange","type","pattern","title","required","Component","connect","dispatch","obj","ContactListItem","contacts","onDelete","map","onClick","getVisibleContacts","allContacts","filter","normalizedFilter","toLocaleLowerCase","contact","includes","items","ContactList","Filter","target","Container","children","App","createReducer","initialContacts","normalizedName","some","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4da8fbbf.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst contactsActions = { addContact, deleteContact, changeFilter };\nexport default contactsActions;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nimport './ContactForm.scss';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  onInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            className=\"ContactForm__input\"\n            onChange={this.onInputChange}\n            value={this.state.name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            className=\"ContactForm__input\"\n            onChange={this.onInputChange}\n            value={this.state.number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className=\"submit__btn\" onChange={this.onSubmit} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: obj => dispatch(contactsActions.addContact(obj)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ContactListItem.scss';\n\nconst ContactListItem = ({ contacts, onDelete }) =>\n  contacts.map(({ id, name, number }) => (\n    <li className=\"ContactListItem\" key={id}>\n      <span className=\"ContactListItem__data\">\n        {name}: {number}\n      </span>\n\n      <button\n        className=\"delete__btn\"\n        onClick={() => onDelete(id)}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  ));\n\nContactListItem.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired))\n    .isRequired,\n};\n\nexport default ContactListItem;\n","import contactsActions from '../../../redux/contacts/contacts-actions';\nimport { connect } from 'react-redux';\nimport ContactListItem from './ContactListItem';\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLocaleLowerCase();\n  return allContacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from 'react';\n\nimport ContactListItem from './ContactListItem';\nimport './ContactList.scss';\n\nconst ContactList = () => (\n  <ul className=\"ContactList\">{<ContactListItem />}</ul>\n);\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find your contacts by name\n    <input\n      className=\"Filter__input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\nimport Filter from './Filter';\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Container.scss';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React, { Component } from 'react';\n\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\nimport Container from './Components/Container';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport initialContacts from '../../data/contacts.json';\nimport contactsActions from './contacts-actions';\n\nconst items = createReducer(initialContacts, {\n  [contactsActions.addContact]: (state, { payload }) => {\n    const normalizedName = payload.name.toLocaleLowerCase();\n    return state.some(\n      contact => contact.name.toLocaleLowerCase() === normalizedName,\n    )\n      ? alert(`${payload.name} is already in contacts`)\n      : [payload, ...state];\n  },\n\n  [contactsActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}